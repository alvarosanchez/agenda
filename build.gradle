plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id 'groovy'
    id "com.github.erdi.webdriver-binaries" version "2.2"
}

version "0.1"
group "com.greachconf"

ext {
    drivers = ['chrome','chromeHeadless', 'firefox', 'firefoxHeadless', 'htmlUnit']
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"


    implementation "io.micronaut:micronaut-views-velocity"
    runtime "org.apache.velocity:velocity-engine-core:$velocityEngineCoreVersion"
    implementation "com.vladsch.flexmark:flexmark:$flexmarkVersion"


    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"

    testImplementation "org.gebish:geb-spock:$gebVersion"
    testImplementation "org.seleniumhq.selenium:htmlunit-driver:2.35.1"
    testRuntime 'net.sourceforge.htmlunit:htmlunit:2.35.0'
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    // other dependencies expose guava android version, selenium needs JRE version
    testImplementation 'com.google.guava:guava:28.0-jre'
}

test.classpath += configurations.developmentOnly

mainClassName = "com.greachconf.Application"

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')


webdriverBinaries {
    chromedriver {
        version = chromedriverVersion
    }
    geckodriver {
        version = geckodriverVersion
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP
        systemProperty "geb.env", driver
    }
}

if (System.getProperty('geb.env') != null) {
    tasks.withType(Test) {
        systemProperty "geb.env", System.getProperty('geb.env')
    }
}

tasks.register('copyStaticWebsite', Copy) { task ->
    task.from(file("src/main/resources/public"))
    task.into(file("build/dist"))
    task.mustRunAfter('test')
}
check.dependsOn('copyStaticWebsite')

tasks.register('copyAgendaPage') { task ->
    task.doLast {
        File dir = project.file("build/reports/com/greachconf/AgendaSpec")
        dir.eachFile { file ->
            File outputDir = project.file("build/dist/agenda")
            outputDir.mkdirs()

            File output = project.file("build/dist/agenda/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.dependsOn('copyAgendaPage')

tasks.register('copySpeakersPage') { task ->
    task.doLast {
        File dir = file("build/reports/com/greachconf/SpeakersSpec")
        dir.eachFile { file ->
            File outputDir = project.file("build/dist/speakers")
            outputDir.mkdirs()

            File output = project.file("build/dist/speakers/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.dependsOn('copySpeakersPage')

tasks.register('copyTalkPages') { task ->
    task.doLast {
        File dir = file("build/reports/com/greachconf/TalkSpec")
        dir.eachFile { file ->
            String name = file.name.replaceAll('.html', '')
            File outputDir = project.file("build/dist/talk/$name")
            outputDir.mkdirs()
            File output = project.file("build/dist/talk/${name}/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.dependsOn('copyTalkPages')
tasks.register('copySpeakerPages') { task ->
    task.doLast {
        File dir = file("build/reports/com/greachconf/SpeakerSpec")
        dir.eachFile { file ->
            String name = file.name.replaceAll('.html', '')

            File outputDir = project.file("build/dist/speaker/$name")
            outputDir.mkdirs()
            File output = project.file("build/dist/speaker/${name}/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.dependsOn('copySpeakerPages')

def jvmOpenModulesArgs = [
        "--add-opens=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED",
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.annotation=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.module=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.ref=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.math=ALL-UNNAMED",
        "--add-opens=java.base/java.net=ALL-UNNAMED",
        "--add-opens=java.base/java.net.spi=ALL-UNNAMED",
        "--add-opens=java.base/java.nio=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.channels=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.channels.spi=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.charset=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.charset.spi=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.file=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.file.attribute=ALL-UNNAMED",
        "--add-opens=java.base/java.nio.file.spi=ALL-UNNAMED",
        "--add-opens=java.base/java.security=ALL-UNNAMED",
        "--add-opens=java.base/java.security.acl=ALL-UNNAMED",
        "--add-opens=java.base/java.security.cert=ALL-UNNAMED",
        "--add-opens=java.base/java.security.interfaces=ALL-UNNAMED",
        "--add-opens=java.base/java.security.spec=ALL-UNNAMED",
        "--add-opens=java.base/java.text=ALL-UNNAMED",
        "--add-opens=java.base/java.text.spi=ALL-UNNAMED",
        "--add-opens=java.base/java.time=ALL-UNNAMED",
        "--add-opens=java.base/java.time.chrono=ALL-UNNAMED",
        "--add-opens=java.base/java.time.format=ALL-UNNAMED",
        "--add-opens=java.base/java.time.temporal=ALL-UNNAMED",
        "--add-opens=java.base/java.time.zone=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent.locks=ALL-UNNAMED",
        "--add-opens=java.base/java.util.function=ALL-UNNAMED",
        "--add-opens=java.base/java.util.jar=ALL-UNNAMED",
        "--add-opens=java.base/java.util.regex=ALL-UNNAMED",
        "--add-opens=java.base/java.util.spi=ALL-UNNAMED",
        "--add-opens=java.base/java.util.stream=ALL-UNNAMED",
        "--add-opens=java.base/java.util.zip=ALL-UNNAMED",
        "--add-opens=java.datatransfer/java.awt.datatransfer=ALL-UNNAMED",
        "--add-opens=java.desktop/java.applet=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.color=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.desktop=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.dnd=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.dnd.peer=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.event=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.font=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.geom=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.im=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.im.spi=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.image=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.image.renderable=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.peer=ALL-UNNAMED",
        "--add-opens=java.desktop/java.awt.print=ALL-UNNAMED",
        "--add-opens=java.desktop/java.beans=ALL-UNNAMED",
        "--add-opens=java.desktop/java.beans.beancontext=ALL-UNNAMED",
        "--add-opens=java.instrument/java.lang.instrument=ALL-UNNAMED",
        "--add-opens=java.logging/java.util.logging=ALL-UNNAMED",
        "--add-opens=java.management/java.lang.management=ALL-UNNAMED",
        "--add-opens=java.prefs/java.util.prefs=ALL-UNNAMED",
        "--add-opens=java.rmi/java.rmi=ALL-UNNAMED",
        "--add-opens=java.rmi/java.rmi.activation=ALL-UNNAMED",
        "--add-opens=java.rmi/java.rmi.dgc=ALL-UNNAMED",
        "--add-opens=java.rmi/java.rmi.registry=ALL-UNNAMED",
        "--add-opens=java.rmi/java.rmi.server=ALL-UNNAMED",
        "--add-opens=java.sql/java.sql=ALL-UNNAMED"
]
tasks.withType(GroovyCompile) {
    options.forkOptions.jvmArgs = jvmOpenModulesArgs
}
tasks.withType(Test) {
    jvmArgs = jvmOpenModulesArgs
}

tasks.register('zipDist', Zip) { task ->
    task.group("build")
    task.dependsOn tasks.named('check')
    task.archiveFileName = "dist.zip"
    task.destinationDirectory = file("$buildDir")
    task.from("$buildDir/dist")
}

tasks.register('verifyAgendaExists') { task ->
    task.doLast {
        if (!new File(buildDir.absolutePath + "/dist/agenda/index.html").exists()) {
            throw new GradleException("Agenda file does not exist")
        }
    }

}
zipDist.finalizedBy('verifyAgendaExists')