plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id 'groovy'
    id "com.github.erdi.webdriver-binaries" version "2.2"
}

version "0.1"
group "com.greachconf"

ext {
    distPath = projectDir.absolutePath + "/build/dist"
    reportsPath =  projectDir.absolutePath + "/build/reports/com/greachconf"
    drivers = ['chrome','chromeHeadless', 'firefox', 'firefoxHeadless', 'htmlUnit']
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"


    implementation "io.micronaut:micronaut-views-velocity"
    runtime "org.apache.velocity:velocity-engine-core:$velocityEngineCoreVersion"
    implementation "com.vladsch.flexmark:flexmark:$flexmarkVersion"


    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"

    testImplementation "org.gebish:geb-spock:$gebVersion"
    testImplementation "org.seleniumhq.selenium:htmlunit-driver:2.35.1"
    testRuntime 'net.sourceforge.htmlunit:htmlunit:2.35.0'
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    // other dependencies expose guava android version, selenium needs JRE version
    testImplementation 'com.google.guava:guava:28.0-jre'
}

test.classpath += configurations.developmentOnly

mainClassName = "com.greachconf.Application"

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')


webdriverBinaries {
    chromedriver {
        version = chromedriverVersion
    }
    geckodriver {
        version = geckodriverVersion
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP
        systemProperty "geb.env", driver
    }
}

if (System.getProperty('geb.env') != null) {
    tasks.withType(Test) {
        systemProperty "geb.env", System.getProperty('geb.env')
    }
}

tasks.register('copyStaticWebsite', Copy) { task ->
    task.from(file("src/main/resources/public"))
    task.into(file("build/dist"))
    task.mustRunAfter('test')
}
check.dependsOn('copyStaticWebsite')

tasks.register('copyAgendaPage') { task ->
    task.doLast {
        File dir = new File(reportsPath + '/AgendaSpec')
        dir.eachFile { file ->
            String path = distPath + '/agenda'
            File outputDir = new File(path)
            outputDir.mkdirs()

            File output = new File("${path}/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.dependsOn('copyAgendaPage')

tasks.register('copySpeakersPage') { task ->
    task.doLast {
        File dir = new File(reportsPath + '/SpeakersSpec')
        dir.eachFile { file ->
            String path = distPath + '/speakers'
            File outputDir = new File(path)
            outputDir.mkdirs()

            File output = new File("${path}/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.dependsOn('copySpeakersPage')

tasks.register('copyTalkPages') { task ->
    task.doLast {
        File dir = new File(reportsPath + '/TalkSpec')
        dir.eachFile { file ->
            String name = file.name.replaceAll('.html', '')

            String path = distPath + "/talk/$name"
            File outputDir = new File(path)
            outputDir.mkdirs()
            File output = new File("${path}/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.finalizedBy('copyTalkPages')
tasks.register('copySpeakerPages') { task ->
    task.doLast {
        File dir = new File(reportsPath + '/SpeakerSpec')
        dir.eachFile { file ->
            String name = file.name.replaceAll('.html', '')

            String path = distPath + "/speaker/$name"
            File outputDir = new File(path)
            outputDir.mkdirs()
            File output = new File("${path}/index.html")
            output.createNewFile()
            output.text = file.text
        }
    }
    task.mustRunAfter('test')
}
check.finalizedBy('copySpeakerPages')

tasks.register('')